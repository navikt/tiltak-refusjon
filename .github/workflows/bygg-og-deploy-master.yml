name: Bygg og deploy master

on:
  push:
    branches:
      - 'master'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_BASE: docker.pkg.github.com/${{ github.repository }}/${{ github.event.repository.name }}
  IMAGE: docker.pkg.github.com/${{ github.repository }}/${{ github.event.repository.name }}:${{ github.sha }}

jobs:
  trigge-annet-repo:
    name: "Trigg bygg i annet repo"
    runs-on: ubuntu-latest
    steps:
      - name: Gjør REST-kall
        uses: actions/github-script@0.5.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.actions.createWorkflowDispatch({
              'navikt',
              'tiltak-refusjon-loginproxy',
              'trigges-utenfra.yml',
              'master'
            });

  bygg:
    name: Bygg
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
    steps:
      - name: Lukk deployment-issues
        uses: actions/github-script@0.5.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['deploy']
            }).then(response => {
              response.data.forEach(issue => {
                github.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              });
            });
      - name: Sjekk ut kode
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Installer avhengigheter
        run:  yarn install --production --ignore-scripts --no-optional

#      - name: Kjør tester
#        run: yarn test

      - name: Bygg
        run: yarn build

      - name: Bygg, tag og push Docker-image
        run: |
          docker build --tag $IMAGE --tag $IMAGE_BASE:latest .
          echo $GITHUB_TOKEN | docker login docker.pkg.github.com -u $GITHUB_REPOSITORY --password-stdin
          docker push $IMAGE_BASE

  deploy-dev-gcp-innside:
    name: Deploy til dev-gcp innside
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
    needs: bygg
    steps:
      - name: Sjekk ut kode
        uses: actions/checkout@v2
      - name: Deploy til dev-gcp innside
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: nais.yml
          PRINT_PAYLOAD: true
          VARS: nais/dev-gcp-innside.yml

  deploy-dev-gcp-utside:
    name: Deploy til dev-gcp utside
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
    needs: bygg
    steps:
      - name: Sjekk ut kode
        uses: actions/checkout@v2
      - name: Deploy til dev-gcp utside
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: nais.yml
          PRINT_PAYLOAD: true
          VARS: nais/dev-gcp-utside.yml
          
  deploy-prod-gcp-innside:
    name: Deploy til prod-gcp innside
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
    needs: bygg
    steps:
      - name: Sjekk ut kode
        uses: actions/checkout@v2
      - name: Deploy til prod-gcp innside
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: nais.yml
          PRINT_PAYLOAD: true
          VARS: nais/prod-gcp-innside.yml

  deploy-prod-gcp-utside:
    name: Deploy til prod-gcp utside
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
    needs: bygg
    steps:
      - name: Sjekk ut kode
        uses: actions/checkout@v2
      - name: Deploy til prod-gcp utside
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: nais.yml
          PRINT_PAYLOAD: true
          VARS: nais/prod-gcp-utside.yml